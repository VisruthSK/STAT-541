{
  "hash": "1539a4b3b07ff74aae15184b1c80cc64",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1: Refresher of Quarto and Friends\" \ndate: \"2025.04.07\"\nexecute: \n  echo: true\nwarning: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggridges)\n```\n:::\n\n\n## Quarto\n\nFirst, let's make sure you know how to use Markdown formatting to style a Quarto\ndocument.\n\n1.  **Make this text bold.**\n\n2.  *Make this text italicized*.\n\n3.  Make these into a bullet point list:\n\n* Apples \n* Bananas\n* Potatoes\n\n4.  Edit the YAML to remove warning messages from being output in the rendered\nHTML file\n\n5.  Using code chunk options, make it so this chunk shows the plot but not the\nsource code:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/mpg-boxplots-1.png){width=672}\n:::\n:::\n\n\n6.  Using code chunk options, remove the messages about bandwidth\n`geom_density_ridges()` chose to use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(y = manufacturer, x = hwy)) +\n  geom_density_ridges() +\n  labs(\n    x = \"\",\n    y = \"\",\n    title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mpg-density-ridges-1.png){width=672}\n:::\n:::\n\n\n7.  Using code chunk options, make it so that these plots are printed\nside-by-side:\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(y = manufacturer, x = hwy)) +\n  geom_boxplot() +\n  labs(\n    x = \"\",\n    y = \"\",\n    title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/side-by-side-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(y = manufacturer, x = hwy)) +\n  geom_density_ridges() +\n  labs(\n    x = \"\",\n    y = \"\",\n    title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/side-by-side-plots-2.png){width=672}\n:::\n:::\n\n\n8.  Using code chunk options, make it so this chunk shows the code but not the\noutput:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n:::\n\n\n9.  Using code chunk options, make it so the file can still knit even though\nthis chunk has an error\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + a\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'a' not found\n```\n\n\n:::\n:::\n\n\n10. Using code chunk options, create a descriptive `label` for each of the code\nchunks above.\n\n## Data Wrangling Review\n\nSince you already seen some `ggplot`s, let's do a bit of review on data \nhandling. In this class, we will exclusively make use of tools from the \n`tidyverse` suite of packages to perform our data cleaning and wrangling\noperations. If you are less familiar with these packages or it's been some time\nsince you used them, I would strongly recommend referencing the function \ndocumentation!  \n\nFor these problems, we will continue to work with the `mpg` data frame, making\nvarious changes to the data to clean it up. \n\n11. The `fl` variable describes the type of fuel for each car, with levels: `p`, \n`r`, `e`, `d`, and `c`. Do some research into what each of these labels mean! \nThen, use the `if_else()` function to create a new variable (`fuel_type`) with\ntwo levels: `petrol` (any car using petrolium-based gas) and \n`alternative energy` (any car not using petrolium-based gas). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://stackoverflow.com/questions/25548656/ggplot2s-mpg-dataset-whats-the-fl-variable\nclean_mpg <- mpg |>\n  mutate(\n    fuel_type = if_else(\n      fl %in% c(\"r\", \"p\", \"d\"), # regular, premium, diesel\n      \"petrol\",\n      \"alternative energy\" # ethanol, compressed natural gas\n    )\n  )\n```\n:::\n\n\n12. The `drv` variable describes if the car has front drive (`f`), rear drive\n(`r`), or four wheel drive (`4`). Let's make better labels for these values! \nSpecifically, use the `case_when()` function to change the `drv` varible to have\nthe following levels: `front`, `rear`, `four wheel`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_mpg <- clean_mpg |>\n  mutate(\n    drv = case_when(\n      drv == \"f\" ~ \"front\",\n      drv == \"r\" ~ \"rear\",\n      drv == \"4\" ~ \"four wheel\"\n    )\n  )\n```\n:::\n\n\n(string split + remove extra \")\" )\n\n13. The `trans` variable contains two pieces of information, (1) the\ntransmission style (`auto` or `manual`) and the specific type of transmission\n(e.g., `l5`, `m5`). Using the `str_split()` function, create a new variable\n(`trans_type`) containing the specific type of transmission of each car. Once\nyou've made this new variable, use the `rename()` function to change the name\nof the `trans` column to `trans_style`.   \n*Hint: You will need to deal with the stray parenthesis!* \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_mpg <- clean_mpg |>\n  separate_wider_regex(\n    trans,\n    patterns = c(trans_style = \"[^()]+\", \"\\\\(\", trans_type = \"[^)]+\", \"\\\\)\")\n  )\n```\n:::\n\n\n## Getting to know your classmates\n\n14. Find someone who took Stat 331 from a different professor than you. Compare\nyour experiences. Tell me their name and professor. List one or two things that\nyou think you learned more about, and one or two things that they learned more\nabout.\n\nI spoke to Matt Babb who took STAT 331 with Dr. Robinson. He learned a lot more about Shiny, and did more outside of class. I don't remember learning any Shiny in 331. Matt did some cool work with Shiny and made a Life Wheel. I learned more about OOP and modelling through my own ventures. Matt said he enjoyed his experience and thought it was fun, albeit frustrating.\n\n15. Find someone in the class who **does not** share your birth month. Tell me\ntheir name and birthday, and use R to find out how many days apart your\nbirthdays are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\ninterval(ymd(\"2005-08-26\"), ymd(\"1992-12-21\")) |>\n  as.duration() |>\n  as.numeric(\"days\") |>\n  abs()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4631\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}